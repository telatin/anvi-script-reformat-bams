#!/usr/bin/env python
# -*- coding: utf-8

import os
import sys
import shutil
import pysam
import pandas as pd


import anvio
import anvio.fastalib as u
import anvio.utils as utils
import anvio.terminal as terminal
import anvio.constants as constants
import anvio.filesnpaths as filesnpaths

from anvio.errors import ConfigError, FilesNPathsError

__author__ = "Developers of anvi'o (see AUTHORS.txt)"
__copyright__ = "Copyleft 2015-2023, the Meren Lab (http://merenlab.org/)"
__credits__ = []
__license__ = "GPL 3.0"
__version__ = anvio.__version__
__authors__ = ['telatin']   #TODO: update authors list
__requires__ = ["bam-file"] #TODO: add "report-file" (also as output of reformat-fasta)
__provides__ = ["bam-file"]
__description__ =  ("Reformat a BAM file to match the update sequence names after running anvi-script-reformat-fasta")

__SUFFIX__ = ".reformatted.bam"

run = terminal.Run()
progress = terminal.Progress()
pp = terminal.pretty_print
P = terminal.pluralize

def load_dict_from_tsv(path):
    name_dict = { }
    with open(path) as fh:
        for line in fh:
            if line.startswith("#"):
                continue
            if not '\t' in line:
                raise Exception(f"ERROR: Invalid line in {path} (missing tab): {line}")
            new, old = line.strip().split("\t")
            old = old.split(" ")[0].split("\t")[0]
            name_dict[old] = new

    return name_dict

def update_read(read, new_header):
    new_read = pysam.AlignedSegment(header=new_header)
    new_read.query_name = read.query_name
    new_read.query_sequence = read.query_sequence
    new_read.flag = read.flag
    new_read.reference_id = read.reference_id
    new_read.reference_start = read.reference_start
    new_read.mapping_quality = read.mapping_quality
    new_read.cigar = read.cigar
    new_read.next_reference_id = read.next_reference_id
    new_read.next_reference_start = read.next_reference_start
    new_read.template_length = read.template_length
    new_read.query_qualities = read.query_qualities
    new_read.tags = read.tags
    return new_read

def reformat_BAM(args):
    # print dump of `args`
    run.info('Input BAM file', args.bam_file)
    run.info('Rename list', args.rename_list)
    
    # Parameters check
    input_basename = os.path.basename(args.bam_file)
    output_filename = args.output_bam

    if not args.output_bam:
        # Remove .bam and add .reformatted.bam
        output_filename = os.path.join(os.path.dirname(args.bam_file), 
                                       input_basename[:-4] + __SUFFIX__ if input_basename.endswith(".bam") else input_basename + ".reformatted.bam"
        )
        run.info("Output BAM file", output_filename)
    run.info('Overwrite output?', args.force, mc='green' if args.force else 'red')

    # Check input file exist
    filesnpaths.is_file_exists(args.bam_file)
    filesnpaths.is_file_exists(args.rename_list)

    # Check output exists
    if os.path.exists(output_filename) and not args.force:
        raise ConfigError(f"Output file {output_filename} already exists. Use --force to overwrite it.")
    
    # Load the list (tsv file, two columns, new name TAB old name)
    run.warning(None, header='WHAT WAS THERE', lc="cyan")
    rename_dict = load_dict_from_tsv(args.rename_list)
    run.info(f"Loaded {args.rename_list}", f"{len(rename_dict):,}", mc="green")

    run.warning(None, header='WHAT WAS DONE', lc="cyan")
    # Open the BAM file with pysam and rename all the contigs in header and alignment records
    with pysam.AlignmentFile(args.bam_file, "rb") as bam:
        with pysam.AlignmentFile(args.bam_file, "rb") as bam:
            # Convert header to dictionary, update contig names, and create new header
            header_dict = bam.header.to_dict()
            for sq in header_dict['SQ']:
                old_name = sq['SN']
                if old_name in rename_dict:
                    sq['SN'] = rename_dict[old_name]
            new_header = pysam.AlignmentHeader.from_dict(header_dict)
            run.info("Sequences in BAM file", len(header_dict['SQ']))
            
            if len(rename_dict) != len(header_dict['SQ']):
                raise ConfigError(f"ERROR: The number of sequences in the BAM file ({len(header_dict['SQ'])}) ")

        # Create a new BAM file with the new header and updated records
        with pysam.AlignmentFile(args.bam_file, "rb") as bam, pysam.AlignmentFile(output_filename, "wb", header=new_header) as out_bam:
            for read in bam:
                updated_read = update_read(read, new_header)
                out_bam.write(updated_read)

    run.info("Output BAM file created", output_filename)
    
def reformat_FASTA(args):
    if args.keep_ids and args.exclude_ids:
        raise ConfigError("You can't use`--exclude-ids and --keep-ids together :/")

    if args.exact_length and args.min_len:
        raise ConfigError(f"You can't ask your reads to be an exact lenght of {args.exact_length} "
                          f"and longer than {args.min_len} at the same time. It just doesn't make "
                          f"any sense and that's why.")

    if args.output_file and args.overwrite_input:
        raise ConfigError("You can't ask anvi'o to overwrite your input file, and also provide an "
                          "output file name at the same time.")

    if not args.overwrite_input and not args.output_file:
        raise ConfigError("You have not provided an output file name. If you are feeling extra "
                          "adventurous today and would like anvi'o to overwrite your input file "
                          "you must use the `--overwrite` flag.")

    # if the user wants to overwrite the input file, we will do it by first
    # setting the output file path to a temp file, and then moving it on
    # top of the input file, overwriting it forever.
    if args.overwrite_input:
       args.output_file = filesnpaths.get_temp_file_path()
       if args.contigs_fasta.endswith(".gz"):
            args.output_file += ".gz"

    filesnpaths.is_file_fasta_formatted(args.contigs_fasta)
    filesnpaths.is_output_file_writable(args.output_file)

    if not args.ignore_empty_sequences:
        # check for empty sequences
        fasta = u.SequenceSource(args.contigs_fasta)

        sequence_lenghts = []
        while next(fasta):
            sequence_lenghts.append(len(fasta.seq))

        num_empty_sequences = sequence_lenghts.count(0)
        if num_empty_sequences:
            raise ConfigError(f"We have a problem, Houston. Of the total {len(sequence_lenghts)} entries "
                              f"in your FASTA file, {num_empty_sequences} {P('has', num_empty_sequences, alt='have' )} "
                              f"no sequences (i.e., they're blank). You have two options: either (1) use the "
                              f"flag `--ignore-empty-seqeunces` so anvi'o can ignore these FASTA entries, or "
                              f"(2) go back to your FASTA file and figure out why they are empty.")
    else:
        pass

    report_file = open(args.report_file, 'w') if args.report_file and args.simplify_names else None
    prefix = args.prefix if args.prefix else None

    if prefix:
        utils.is_this_name_OK_for_database('contig name prefix', prefix)

    if args.exclude_ids:
        filesnpaths.is_file_exists(args.exclude_ids)
        exclude_ids = set([l.split('\t')[0].strip() for l in open(args.exclude_ids, 'r').readlines()])
        run.info('Input IDs to remove', '%d found' % len(exclude_ids))
    else:
        exclude_ids = set([])

    if args.keep_ids:
        filesnpaths.is_file_exists(args.keep_ids)
        keep_ids = set([l.split('\t')[0].strip() for l in open(args.keep_ids, 'r').readlines()])
        run.info('Input IDs to consider', '%d found' % len(keep_ids))
    else:
        keep_ids = set([])

    if args.seq_type is not None:
        replace_chars = True
        if args.seq_type == 'AA':
            acceptable_chars = set(constants.amino_acids)
            replacement = 'X'
        else:
            acceptable_chars = set(constants.nucleotides)
            replacement = 'N'
    else:
        replace_chars = False

    if args.export_gap_counts_table:
        gaps_info_list = []

    # summary of where we are
    run.info('Input', args.contigs_fasta)

    if args.overwrite_input:
        run.info('Output', "(anvi'o will overwrite your input file)", mc='red')
    else:
        run.info('Output', args.output_file)

    total_num_nucleotides = 0
    total_num_contigs = 0
    total_num_nucleotides_removed = 0
    total_num_nucleotides_modified = 0
    total_num_contigs_removed = 0

    fasta = u.SequenceSource(args.contigs_fasta)
    output = u.FastaOutput(args.output_file)

    while next(fasta):
        l = len(fasta.seq)

        total_num_nucleotides += l
        total_num_contigs += 1

        if not l:
            # this is an entry with a blank sequence
            total_num_contigs_removed += 1
            continue

        if replace_chars:
            seq = []
            for char in fasta.seq:
                if char not in acceptable_chars:
                    seq.append(replacement)
                    total_num_nucleotides_modified += 1
                else:
                    seq.append(char)
            fasta.seq = ''.join(seq)

        if keep_ids and fasta.id.split()[0] not in keep_ids:
            total_num_nucleotides_removed += l
            total_num_contigs_removed += 1
            continue

        if exclude_ids and fasta.id.split()[0] in exclude_ids:
            total_num_nucleotides_removed += l
            total_num_contigs_removed += 1
            continue

        length = len(fasta.seq)
        if args.exact_length and length != args.exact_length:
            total_num_nucleotides_removed += l
            total_num_contigs_removed += 1
            continue
        elif length < args.min_len:
            total_num_nucleotides_removed += l
            total_num_contigs_removed += 1
            continue

        num_gaps = fasta.seq.count('-')
        if args.export_gap_counts_table:
            gaps_info_list.append([fasta.id, num_gaps])

        percentage_of_gaps = num_gaps * 100.0 / l
        if percentage_of_gaps >= args.max_percentage_gaps:
            total_num_nucleotides_removed += l
            total_num_contigs_removed += 1
            continue

        if num_gaps >= args.max_gaps:
            total_num_nucleotides_removed += l
            total_num_contigs_removed += 1
            continue

        if args.simplify_names:
            if prefix:
                defline = '%s_%012d' % (prefix, fasta.pos)
            else:
                defline = 'c_%012d' % fasta.pos

            output.write_id(defline)
            output.write_seq(fasta.seq, split = False)

            if report_file:
                report_file.write('%s\t%s\n' % (defline, fasta.id))
        else:
            output.store(fasta, split = False)

    if args.export_gap_counts_table:
        df = pd.DataFrame(gaps_info_list, columns=["header", "num_gaps"])
        df.to_csv(args.export_gap_counts_table + ".tsv", sep='\t', index=False)

    if report_file:
        report_file.close()

    fasta.close()
    output.close()

    if args.overwrite_input:
        shutil.move(args.output_file, args.contigs_fasta)

    run.warning(None, header='WHAT WAS THERE', lc="cyan")
    run.info('Total num contigs', total_num_contigs)
    run.info('Total num nucleotides', total_num_nucleotides)

    run.warning(None, header='WHAT WAS ASKED', lc="cyan")
    run.info('Simplify deflines?', "Yes" if args.simplify_names else "No")
    run.info('Add prefix to sequence names?', f"Yes, add '{args.prefix}'" if args.prefix else "No")
    run.info('Exact length of contigs to keep', args.exact_length, mc="red") if args.exact_length else run.info("Minimum length of contigs to keep", args.min_len)
    run.info('Max % gaps allowed', '%.2f%%' % args.max_percentage_gaps)
    run.info('Max num gaps allowed', args.max_gaps)
    run.info('Exclude specific sequences?', f"Yes, those listed in {args.exclude_ids}" if args.exclude_ids else "No")
    run.info('Keep specific sequences?', f"Yes, those listed in {args.keep_ids}" if args.keep_ids else "No")
    run.info('Enforce sequence type?', f"Yes, enforce '{args.seq_type}'" if args.seq_type else "No")

    run.warning(None, header='WHAT HAPPENED', lc="cyan")
    if args.ignore_empty_sequences:
        run.info('Entries w/blank sequences discarded', 'Yes', mc='red')
    run.info('Contigs removed', f'{pp(total_num_contigs_removed)} ({total_num_contigs_removed * 100.0 / total_num_contigs:.2f}% of all)', mc='green')
    run.info('Nucleotides removed', f'{pp(total_num_nucleotides_removed)} ({total_num_nucleotides_removed * 100.0 / total_num_nucleotides:.2f}% of all)', mc='green')
    run.info('Nucleotides modified', f'{pp(total_num_nucleotides_modified)} ({total_num_nucleotides_modified * 100.0 / total_num_nucleotides:.5f}% of all)', mc='green')
    run.info('Deflines simplified', args.simplify_names, mc='green')

    if args.overwrite_input:
        run.info_single("The contents of your input file have changed because you used "
                        "the flag `--overwrite-input`.", nl_before=1, nl_after=1)


if __name__ == '__main__':
    from anvio.argparse import ArgumentParser
    parser = ArgumentParser(description=__description__)

    groupInput = parser.add_argument_group('INPUT', 'The input file you wish to work with.')
    groupInput.add_argument('bam_file', metavar='BAM FILE')
    groupInput.add_argument('-l', '--rename-list', help="tabular file produced by \"anvi-script-reformat-fasta  --report file\"", required=True)
    
    
    groupOutput = parser.add_argument_group('OUTPUT', 'Dealing with the output.')
    groupOutput.add_argument('-o', '--output-bam', required=False, metavar='FASTA FILE PATH',
                        help="The output BAM file name, if  not specified defaults to the input file name with the suffix '.reformatted.bam'")


    groupMisc = parser.add_argument_group('OTHER OPTIONS')
    groupMisc.add_argument('--force', default=False, action="store_true",
                        help="Overwrite output file if it exists.")


   
    args = parser.get_args(parser)

    try:
        reformat_BAM(args)
    except ConfigError as e:
        print(e)
        sys.exit(-1)
    except FilesNPathsError as e:
        print(e)
        sys.exit(-2)