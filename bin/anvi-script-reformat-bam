#!/usr/bin/env python
# -*- coding: utf-8

import os
import sys
import shutil
import pysam
import pandas as pd


import anvio
import anvio.utils as utils
import anvio.terminal as terminal
import anvio.constants as constants
import anvio.filesnpaths as filesnpaths

from anvio.errors import ConfigError, FilesNPathsError

__author__    = "Developers of anvi'o (see AUTHORS.txt)"
__copyright__ = "Copyleft 2015-2023, the Meren Lab (http://merenlab.org/)"
__credits__   = []
__license__   = "GPL 3.0"
__version__   = anvio.__version__
__authors__   = ['telatin']     #TODO: update authors list
__requires__  = ["bam-file", "report-file"]   #TODO: add "report-file" (also as output of reformat-fasta)
__provides__  = ["bam-file"]
__description__ =  ("Reformat a BAM file to match the update sequence names after running anvi-script-reformat-fasta")

__SUFFIX__ = ".reformatted.bam"

run = terminal.Run()
progress = terminal.Progress()
pp = terminal.pretty_print
P = terminal.pluralize

def load_dict_from_tsv(path):
    name_dict = { }
    with open(path) as fh:
        for line in fh:
            if line.startswith("#"):
                continue
            if not '\t' in line:
                raise Exception(f"ERROR: Invalid line in {path} (missing tab): {line}")
            new, old = line.strip().split("\t")
            utils.is_this_name_OK_for_database('contig name prefix', new)
            old = old.split(" ")[0].split("\t")[0]
            name_dict[old] = new

    return name_dict

def update_read(read, new_header):
    new_read = pysam.AlignedSegment(header=new_header)
    new_read.query_name = read.query_name
    new_read.query_sequence = read.query_sequence
    new_read.flag = read.flag
    new_read.reference_id = read.reference_id
    new_read.reference_start = read.reference_start
    new_read.mapping_quality = read.mapping_quality
    new_read.cigar = read.cigar
    new_read.next_reference_id = read.next_reference_id
    new_read.next_reference_start = read.next_reference_start
    new_read.template_length = read.template_length
    new_read.query_qualities = read.query_qualities
    new_read.tags = read.tags
    return new_read

def reformat_BAM(args):
    # print dump of `args`
    run.info('Input BAM file', args.bam_file)
    run.info('Rename list', args.rename_list)
    
    # Parameters check
    input_basename = os.path.basename(args.bam_file)
    output_filename = args.output_bam

    if not args.output_bam:
        # Remove .bam and add .reformatted.bam
        output_filename = os.path.join(os.path.dirname(args.bam_file), 
                                       input_basename[:-4] + __SUFFIX__ if input_basename.endswith(".bam") else input_basename + ".reformatted.bam"
        )
        run.info("Output BAM file", output_filename)
    run.info('Overwrite output?', args.overwrite_output, mc='green' if args.overwrite_output else 'red')

    # Check input file exist
    filesnpaths.is_file_exists(args.bam_file)
    filesnpaths.is_file_exists(args.rename_list)

    # Check output exists
    if os.path.exists(output_filename) and not args.overwrite_output:
        raise ConfigError(f"Output file {output_filename} already exists. Use --force to overwrite it.")
    
    # Load the list (tsv file, two columns, new name TAB old name)
    run.warning(None, header='WHAT WAS THERE', lc="cyan")
    rename_dict = load_dict_from_tsv(args.rename_list)
    run.info(f"Loaded {args.rename_list}", f"{len(rename_dict):,}", mc="green")

    run.warning(None, header='WHAT WAS DONE', lc="cyan")
    # Open the BAM file with pysam and rename all the contigs in header and alignment records
    with pysam.AlignmentFile(args.bam_file, "rb") as bam:
        with pysam.AlignmentFile(args.bam_file, "rb") as bam:
            # Convert header to dictionary, update contig names, and create new header
            header_dict = bam.header.to_dict()
            for sq in header_dict['SQ']:
                old_name = sq['SN']
                if old_name in rename_dict:
                    sq['SN'] = rename_dict[old_name]
            new_header = pysam.AlignmentHeader.from_dict(header_dict)
            run.info("Sequences in BAM file", len(header_dict['SQ']))
            
            if len(rename_dict) != len(header_dict['SQ']):
                raise ConfigError(f"ERROR: The number of sequences in the BAM file ({len(header_dict['SQ'])}) ")

        # Create a new BAM file with the new header and updated records
        with pysam.AlignmentFile(args.bam_file, "rb") as bam, pysam.AlignmentFile(output_filename, "wb", header=new_header) as out_bam:
            for read in bam:
                updated_read = update_read(read, new_header)
                out_bam.write(updated_read)

    run.info("Output BAM file created", output_filename)
    


if __name__ == '__main__':
    from anvio.argparse import ArgumentParser

    parser = ArgumentParser(description=__description__)

    groupA = parser.add_argument_group('INPUT', 'The input file you wish to work with.')
    groupA.add_argument('bam_file', metavar='BAM FILE')
    groupA.add_argument('-l', '--rename-list', metavar="RENAME LIST", help="tabular file produced by \"anvi-script-reformat-fasta  --report file\"", required=True)
    
    
    groupB = parser.add_argument_group('OUTPUT', 'Dealing with the output.')
    groupB.add_argument('-o', '--output-bam', required=False, metavar='FORMATTED BAM',
                        help="The output BAM file name, if  not specified defaults to the input file name with the suffix '.reformatted.bam'")


    groupC = parser.add_argument_group('OTHER OPTIONS')
    groupC.add_argument('--overwrite-output', default=False, action="store_true",
                        help="Overwrite output file if it exists.")


    args = None
    try:
        args = parser.get_args(parser)
    except Exception as e:
        parser.print_help()
        print(f"ERROR: Invalid command syntax, check the synopsis.\n({e})")
        
        sys.exit(-1)

    
    try:
        reformat_BAM(args)
    except ConfigError as e:
        print(e)
        sys.exit(-1)
    except FilesNPathsError as e:
        print(e)
        sys.exit(-2)